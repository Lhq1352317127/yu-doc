import{_ as t,C as r,c as o,o as l,G as n,a2 as i}from"./chunks/framework.BYJ_yxop.js";const _=JSON.parse('{"title":"01-Bootstrap入门","description":"","frontmatter":{"title":"01-Bootstrap入门","publish":false},"headers":[],"relativePath":"note/MYSQL/MySQL设计三大范式.md","filePath":"note/MYSQL/MySQL设计三大范式.md","lastUpdated":1757681940000}'),s={name:"note/MYSQL/MySQL设计三大范式.md"};function h(d,a,p,c,u,m){const e=r("ArticleTopAd");return l(),o("div",null,[n(e),a[0]||(a[0]=i('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>范式即规范。MySQL 范式的作用是：</p><ul><li><p>让我们建的表更佳简洁和高效。</p></li><li><p>让功能独立化，避免耦合。</p></li></ul><h2 id="mysql-设计三大范式" tabindex="-1">MySQL 设计三大范式 <a class="header-anchor" href="#mysql-设计三大范式" aria-label="Permalink to &quot;MySQL 设计三大范式&quot;">​</a></h2><h3 id="第一范式-1nf-原子性" tabindex="-1">第一范式（1NF）：原子性 <a class="header-anchor" href="#第一范式-1nf-原子性" aria-label="Permalink to &quot;第一范式（1NF）：原子性&quot;">​</a></h3><p>表的每一列具有原子性，不可再分。</p><h3 id="第二范式-唯一性" tabindex="-1">第二范式：唯一性 <a class="header-anchor" href="#第二范式-唯一性" aria-label="Permalink to &quot;第二范式：唯一性&quot;">​</a></h3><p>第二范式是建立在第一范式基础上的；外要求所有非主键字段必须完全依赖主键，而不是部分依赖。</p><h3 id="第三范式" tabindex="-1">第三范式 <a class="header-anchor" href="#第三范式" aria-label="Permalink to &quot;第三范式&quot;">​</a></h3><p>第三范式是建立在第二范式基础上的；且要求没有传递依赖。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://www.jianshu.com/p/3e97c2a1687b" target="_blank" rel="noreferrer">MySql--数据库设计三范式</a></li></ul>',12))])}const b=t(s,[["render",h]]);export{_ as __pageData,b as default};
