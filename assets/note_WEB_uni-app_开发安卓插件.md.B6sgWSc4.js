import{_ as a,c as i,o as n,a2 as p}from"./chunks/framework.BYJ_yxop.js";const l="/assets/image-20230724140844561.BO4PB3z-.png",e="/assets/image-20230724141222131.ClzyL5Ud.png",t="/assets/093e4605484b4d21b49283b057a41326.B6LHS0pk.png",h="/assets/image-20230724142623879.C-ySieCi.png",r="/assets/image-20230724143037247.BTIS_PGJ.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"note/WEB/uni-app/开发安卓插件.md","filePath":"note/WEB/uni-app/开发安卓插件.md","lastUpdated":1757681940000}'),d={name:"note/WEB/uni-app/开发安卓插件.md"};function k(c,s,g,o,b,E){return n(),i("div",null,[...s[0]||(s[0]=[p('<ul><li></li><li>选择证书管理，点击创建证书，等待生成成功就好</li></ul><h4 id="uniapp-android-原生插件开发" tabindex="-1">uniapp Android 原生插件开发 <a class="header-anchor" href="#uniapp-android-原生插件开发" aria-label="Permalink to &quot;uniapp Android 原生插件开发&quot;">​</a></h4><h5 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;">​</a></h5><h6 id="下载文件" tabindex="-1">下载文件 <a class="header-anchor" href="#下载文件" aria-label="Permalink to &quot;下载文件&quot;">​</a></h6><p>首先下载uniapp原生插件开发SDK，下载地址见<a href="https://nativesupport.dcloud.net.cn/NativePlugin/course/android.html#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83" target="_blank" rel="noreferrer">下载地址</a></p><p><img src="'+l+'" alt="image-20230724140844561"></p><h6 id="解压" tabindex="-1">解压 <a class="header-anchor" href="#解压" aria-label="Permalink to &quot;解压&quot;">​</a></h6><p>解压后相关文件如下图，我们只需要用到里面的示例工程<em>UniPlugin-Hello-AS</em>来进行插件开发</p><p><img src="'+e+'" alt="image-20230724141222131"></p><h5 id="示例工程导入" tabindex="-1">示例工程导入 <a class="header-anchor" href="#示例工程导入" aria-label="Permalink to &quot;示例工程导入&quot;">​</a></h5><p>1、打开Android Studio，新建工程导入</p><p><img src="'+t+'" alt="img"></p><p>2、选择<em>UniPlugin-Hello-AS</em>项目，点击OK完成工程导入</p><p><img src="https://img-blog.csdnimg.cn/c232bd27e33447659c9d2e942f37838e.png" alt="img"></p><h5 id="插件开发" tabindex="-1">插件开发 <a class="header-anchor" href="#插件开发" aria-label="Permalink to &quot;插件开发&quot;">​</a></h5><h6 id="module-创建" tabindex="-1">Module 创建 <a class="header-anchor" href="#module-创建" aria-label="Permalink to &quot;Module 创建&quot;">​</a></h6><p><img src="https://img-blog.csdnimg.cn/682f6e3f454b48b280a64f29778d3498.png" alt="img">)</p><h6 id="module-类型选择" tabindex="-1">Module 类型选择 <a class="header-anchor" href="#module-类型选择" aria-label="Permalink to &quot;Module 类型选择&quot;">​</a></h6><p>选择Android Library，然后下一步</p><p><img src="'+h+`" alt="image-20230724142623879"></p><h6 id="文件配置" tabindex="-1">文件配置 <a class="header-anchor" href="#文件配置" aria-label="Permalink to &quot;文件配置&quot;">​</a></h6><p>build.gradle文件打开，然后将编辑器文件视图切换到Project，选择我们刚创建的Module目录，然后打开其根目录下的build.gradle文件</p><p><img src="https://img-blog.csdnimg.cn/41a94d1d9ea94f62867285b17e1722ff.png" alt="img"></p><h6 id="build-gradle文件配置" tabindex="-1">build.gradle文件配置 <a class="header-anchor" href="#build-gradle文件配置" aria-label="Permalink to &quot;build.gradle文件配置&quot;">​</a></h6><p>加入以下配置，dependencies里面的初始配置可以保留或注释掉，然后点击同步</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//导入aar需要的配置</span></span>
<span class="line"><span>repositories {</span></span>
<span class="line"><span>    flatDir {</span></span>
<span class="line"><span>        dirs &#39;libs&#39;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>dependencies {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    implementation &#39;androidx.appcompat:appcompat:1.4.1&#39;</span></span>
<span class="line"><span>    implementation &#39;com.google.android.material:material:1.5.0&#39;</span></span>
<span class="line"><span>    testImplementation &#39;junit:junit:4.13.2&#39;</span></span>
<span class="line"><span>    androidTestImplementation &#39;androidx.test.ext:junit:1.1.3&#39;</span></span>
<span class="line"><span>    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.4.0&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //必须添加的依赖</span></span>
<span class="line"><span>    compileOnly &#39;androidx.recyclerview:recyclerview:1.0.0&#39;</span></span>
<span class="line"><span>    compileOnly &#39;androidx.legacy:legacy-support-v4:1.0.0&#39;</span></span>
<span class="line"><span>    compileOnly &#39;androidx.appcompat:appcompat:1.0.0&#39;</span></span>
<span class="line"><span>    compileOnly &#39;com.alibaba:fastjson:1.1.46.android&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    compileOnly fileTree(include: [&#39;uniapp-v8-release.aar&#39;], dir: &#39;../app/libs&#39;)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><img src="`+r+`" alt="image-20230724143037247"></p><h6 id="配置混淆文件" tabindex="-1">配置混淆文件 <a class="header-anchor" href="#配置混淆文件" aria-label="Permalink to &quot;配置混淆文件&quot;">​</a></h6><p>打开Module根目录下的proguard-rules.pro文件，在最后一行末尾加入以下代码</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-keep public class * extends io.dcloud.feature.uniapp.common.UniModule{*;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/b736ce5c1c0c4f1c9c0d5ec6225b020b.png" alt="img"></p><h6 id="创建module类" tabindex="-1">创建Module类 <a class="header-anchor" href="#创建module类" aria-label="Permalink to &quot;创建Module类&quot;">​</a></h6><h6 id="新建类文件" tabindex="-1">新建类文件 <a class="header-anchor" href="#新建类文件" aria-label="Permalink to &quot;新建类文件&quot;">​</a></h6><p>在Module的项目文件夹下创建Module类test</p><p><img src="https://img-blog.csdnimg.cn/7c9acf4206f14e9fb3245c82dd172de0.png" alt="img"></p><h6 id="继承unimodule-类" tabindex="-1">继承UniModule 类 <a class="header-anchor" href="#继承unimodule-类" aria-label="Permalink to &quot;继承UniModule 类&quot;">​</a></h6><p>uniapp的Module扩展必须继承UniModule类</p><p><img src="https://img-blog.csdnimg.cn/f4375a8767c1476b952e1d10ca0a8a03.png" alt="img"></p><h5 id="功能开发" tabindex="-1">功能开发 <a class="header-anchor" href="#功能开发" aria-label="Permalink to &quot;功能开发&quot;">​</a></h5><h6 id="方法定义" tabindex="-1">方法定义 <a class="header-anchor" href="#方法定义" aria-label="Permalink to &quot;方法定义&quot;">​</a></h6><p>需求:定义一个sayHi方法，传入姓名时自动返回Hi + 姓名</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@UniJSMethod(uiThread = true) //会根据注解来判断当前方法是否要运行在 UI 线程，和当前方法是否是扩展方法</span></span>
<span class="line"><span>    public void  sayHi(String name, UniJSCallback callback) {</span></span>
<span class="line"><span>       //判断回调是否为空</span></span>
<span class="line"><span>        if (callback != null) {</span></span>
<span class="line"><span>            //创建一个json对象</span></span>
<span class="line"><span>            JSONObject jsonObject = new JSONObject();</span></span>
<span class="line"><span>            jsonObject.put(&quot;re&quot;, &quot;hi 您好&quot; + name);</span></span>
<span class="line"><span>            //把数据传到uni页面中</span></span>
<span class="line"><span>            callback.invoke(jsonObject);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h6 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h6><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1.扩展方法必须加上@UniJSMethod (uiThread = false or true) 注解。</span></span>
<span class="line"><span>UniApp 会根据注解来判断当前方法是否要运行在 UI 线程，和当前方法是否是扩展方法。</span></span>
<span class="line"><span>2.UniApp是根据反射来进行调用 Module 扩展方法，所以Module中的扩展方法必须是 public 类型。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h6 id="unijscallback结果回调" tabindex="-1"><em>UniJSCallback结果回调</em> <a class="header-anchor" href="#unijscallback结果回调" aria-label="Permalink to &quot;*UniJSCallback结果回调*&quot;">​</a></h6><p><a href="https://nativesupport.dcloud.net.cn/NativePlugin/course/android.html#unijscallback%E7%BB%93%E6%9E%9C%E5%9B%9E%E8%B0%83" target="_blank" rel="noreferrer">官方文档</a></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>作用：uniappJS调用时，返回一些数据</span></span>
<span class="line"><span>方法:</span></span>
<span class="line"><span>	void invoke(Object data); 调用javascript回调方法，此方法将在调用后被销毁。</span></span>
<span class="line"><span>     void invokeAndKeepAlive(Object data); 调用javascript回调方法并保持回调活动以备以后使用。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="插件调试" tabindex="-1">插件调试 <a class="header-anchor" href="#插件调试" aria-label="Permalink to &quot;插件调试&quot;">​</a></h5><h6 id="证书申请" tabindex="-1">证书申请 <a class="header-anchor" href="#证书申请" aria-label="Permalink to &quot;证书申请&quot;">​</a></h6><p>获取 appid，打开<a href="https://so.csdn.net/so/search?q=uniapp%E9%A1%B9%E7%9B%AE&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">uniapp项目</a>，在根目录下找到manifest.json文件，在基础配置中获取到appid</p><p><img src="https://img-blog.csdnimg.cn/82122008191e418399ed9e8984053f77.png" alt="img"></p><h6 id="证书生成" tabindex="-1">证书生成 <a class="header-anchor" href="#证书生成" aria-label="Permalink to &quot;证书生成&quot;">​</a></h6><ul><li>在<a href="https://dev.dcloud.net.cn/#/pages/app/list" target="_blank" rel="noreferrer">uniapp 开发者后台应用管理</a>找到对应项目点击名称进去</li></ul><p><img src="https://img-blog.csdnimg.cn/50d8e19123b142a6b0860d99d963228f.png" alt="img"></p><h6 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h6><ul><li>选择证书管理，点击创建证书，等待生成成功就好</li></ul><p><img src="https://img-blog.csdnimg.cn/50d8e19123b142a6b0860d99d963228f.png" alt="img"></p><ul><li>生成成功后，刷新页面，下载证书，放入原生插件项目的app目录下</li></ul><p><img src="https://img-blog.csdnimg.cn/f8345803aa6e4912abbbc61f68ed2794.png" alt="img"></p><h6 id="证书配置" tabindex="-1">证书配置 <a class="header-anchor" href="#证书配置" aria-label="Permalink to &quot;证书配置&quot;">​</a></h6><p>在后台证书管理页面，点击证书详情获取证书信息以及证书密码</p><p><img src="https://img-blog.csdnimg.cn/db0ceb30f9b14480b6df99a16cdcae21.png" alt="img"></p><p><strong>配置</strong></p><p>在插件项目app目录下的<strong>build.gradle</strong>文件中，将信息依次填入文件中的<em>signingConfigs.config</em>配置项，然后点击右上角同步完成配置，具体如图</p><p><img src="https://img-blog.csdnimg.cn/77394873e6414e82b7790d3e0d7d92d8.png" alt="img"></p><h6 id="插件配置" tabindex="-1">插件配置 <a class="header-anchor" href="#插件配置" aria-label="Permalink to &quot;插件配置&quot;">​</a></h6><p><strong>注册插件</strong></p><p>在插件项目的app\\src\\main\\assets目录下打开dcloud_uniplugins.json，在nativePlugins配置项中添加一项插件配置，type必须为module，因为我们的插件是module类型；name统一跟随插件名；具体如图所示：</p><p><img src="https://img-blog.csdnimg.cn/4e5a310c82ba48e7aa888fa070e35dc0.png" alt="img"></p><h6 id="引入插件" tabindex="-1">引入插件 <a class="header-anchor" href="#引入插件" aria-label="Permalink to &quot;引入插件&quot;">​</a></h6><p>在插件项目app目录下的<strong>build.gradle</strong>文件中，引入刚刚注册的插件，名字与注册名字相同，然后点击同步</p><p><img src="https://img-blog.csdnimg.cn/78a0561d3c2e45bcb6683d83049a939c.png" alt="img"></p><h5 id="离线打包key" tabindex="-1">离线打包Key <a class="header-anchor" href="#离线打包key" aria-label="Permalink to &quot;离线打包Key&quot;">​</a></h5><h6 id="sha1值获取" tabindex="-1"><a href="https://so.csdn.net/so/search?q=sha1&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">sha1</a>值获取 <a class="header-anchor" href="#sha1值获取" aria-label="Permalink to &quot;[sha1](https://so.csdn.net/so/search?q=sha1&amp;spm=1001.2101.3001.7020)值获取&quot;">​</a></h6><p>在证书管理页面，证书详情里面获取证书sha1值，如图</p><p><img src="https://img-blog.csdnimg.cn/a6701689241c417f882dda4f8f1e31d8.png" alt="img"></p><h6 id="获取android包名" tabindex="-1">获取Android包名 <a class="header-anchor" href="#获取android包名" aria-label="Permalink to &quot;获取Android包名&quot;">​</a></h6><p>在插件项目app目录下的<strong>build.gradle</strong>文件中，获取Android包名（可以随意更改），如图</p><p><img src="https://img-blog.csdnimg.cn/5c2f52053395462e8f7b63a4ff9875b8.png" alt="img"></p><h6 id="获取离线打包key" tabindex="-1">获取离线打包key <a class="header-anchor" href="#获取离线打包key" aria-label="Permalink to &quot;获取离线打包key&quot;">​</a></h6><ul><li>在uniapp应用后台离线打包Key管理页面，将上两步获取的值填入对应输入框，然后点击保存，如图：</li></ul><p><img src="https://img-blog.csdnimg.cn/c55e707bb11d4408aa761c27e99087b1.png" alt="img"></p><ul><li>保存后会生成离线打包Key如下：</li></ul><p><img src="https://img-blog.csdnimg.cn/058ba5acd56148f3861bcf3a09106f3d.png" alt="img"></p><h5 id="配置离线打包key" tabindex="-1">配置离线打包Key <a class="header-anchor" href="#配置离线打包key" aria-label="Permalink to &quot;配置离线打包Key&quot;">​</a></h5><p>在插件项目app\\src\\main目录下的AndroidManifest.xml文件中，将上一步生成的离线打包key配置到相应位置，如图</p><p><img src="https://img-blog.csdnimg.cn/93d26f764afa40f7908af3532c19ea71.png" alt="img"></p><h5 id="插件项目集成uniapp项目调试" tabindex="-1">插件项目集成uniapp项目调试 <a class="header-anchor" href="#插件项目集成uniapp项目调试" aria-label="Permalink to &quot;插件项目集成uniapp项目调试&quot;">​</a></h5><h6 id="插件引入" tabindex="-1">插件引入 <a class="header-anchor" href="#插件引入" aria-label="Permalink to &quot;插件引入&quot;">​</a></h6><p>使用*<strong>uni.requireNativePlugin</strong>(&#39;插件名&#39;)*方法调用插件，如下：</p><p><img src="https://img-blog.csdnimg.cn/4d77a11af6fc42ebb8727c963b7571a2.png" alt="img"></p><h6 id="插件方法调用" tabindex="-1">插件方法调用 <a class="header-anchor" href="#插件方法调用" aria-label="Permalink to &quot;插件方法调用&quot;">​</a></h6><p>调用插件中的<em>sayHi</em>方法，利用回调函数获取返回值，具体如下：</p><p><img src="https://img-blog.csdnimg.cn/6cda5303efad40a6b7eba4e536ee30e6.png" alt="img"></p><h6 id="相关代码" tabindex="-1">相关代码 <a class="header-anchor" href="#相关代码" aria-label="Permalink to &quot;相关代码&quot;">​</a></h6><p>相关uniapp页面代码如下：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:100vw;text-align: center; font-weight: bold; padding: 15px 0;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;插件调试&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;padding: 15px 30px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;返回信息：{{ reply }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;padding: 15px 30px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;原始数据：{{ msg }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requireNativePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				reply: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				msg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> that </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			plugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lauwen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				that.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				that.reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.re</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		methods: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.logo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		margin-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		margin-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		margin-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.text-area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#8f8f94</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><h6 id="生成本地打包资源" tabindex="-1">生成本地打包资源 <a class="header-anchor" href="#生成本地打包资源" aria-label="Permalink to &quot;生成本地打包资源&quot;">​</a></h6><p>完成相关代码编写后，需要生成uniapp本地打包资源，生成之后控制台会显示相关路径，如下：</p><p><img src="https://img-blog.csdnimg.cn/41dacb67f71f46538c23691db77e023f.png" alt="img"></p><h6 id="复制打包资源到插件项目" tabindex="-1">复制打包资源到插件项目 <a class="header-anchor" href="#复制打包资源到插件项目" aria-label="Permalink to &quot;复制打包资源到插件项目&quot;">​</a></h6><p>将生成的打包资源复制到插件项目的app\\src\\main\\assets\\apps目录下</p><p><img src="https://img-blog.csdnimg.cn/2c4abd312d164cc19f3784249f724b62.png" alt="img"></p><h6 id="配置uniapp的appid" tabindex="-1">配置uniapp的appid <a class="header-anchor" href="#配置uniapp的appid" aria-label="Permalink to &quot;配置uniapp的appid&quot;">​</a></h6><p>在插件项目app\\src\\main\\assets\\data目录下的dcloud_control.xml文件中配置uniapp的appid，具体如下：</p><p><img src="https://img-blog.csdnimg.cn/91e8c5135c5e44899fdce110abb4d3e1.png" alt="img"></p><h5 id="运行调试" tabindex="-1">运行调试 <a class="header-anchor" href="#运行调试" aria-label="Permalink to &quot;运行调试&quot;">​</a></h5><h6 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h6><p>在Android Studio中运行项目，如下</p><p><img src="https://img-blog.csdnimg.cn/883612c486854f11bc04e7b035da6cb7.png" alt="img"></p><h6 id="运行结果" tabindex="-1">运行结果 <a class="header-anchor" href="#运行结果" aria-label="Permalink to &quot;运行结果&quot;">​</a></h6><p>运行结果如下，成功输出插件预置信息：</p><p><img src="https://img-blog.csdnimg.cn/176cb83bdf684a29ac86a7cc2f0df4f8.jpeg" alt="img"></p><h5 id="uniapp项目引入原生插件" tabindex="-1">uniapp项目引入原生插件 <a class="header-anchor" href="#uniapp项目引入原生插件" aria-label="Permalink to &quot;uniapp项目引入原生插件&quot;">​</a></h5><h6 id="打包插件" tabindex="-1">打包插件 <a class="header-anchor" href="#打包插件" aria-label="Permalink to &quot;打包插件&quot;">​</a></h6><p>SDK<strong>版本统一</strong></p><p>插件包、APP以及uniapp项目的androidSDK版本应该统一一下，避免后续编译打包出错，如图：</p><p><img src="https://img-blog.csdnimg.cn/8658e95623c743d4b758413b82463bb5.png" alt="img"></p><h6 id="开始编译" tabindex="-1">开始编译 <a class="header-anchor" href="#开始编译" aria-label="Permalink to &quot;开始编译&quot;">​</a></h6><p>打开Android Studio，在插件项目中，打开右上角Gradle栏目，选择插件开发项目，选择插件打开，依次点开Tasks-other，然后双击assembleRelease即可进行插件编译，如图：</p><p><img src="https://img-blog.csdnimg.cn/ca928b6b5cc74f37b6eca841523ec76e.png" alt="img"></p><h6 id="获取插件" tabindex="-1">获取插件 <a class="header-anchor" href="#获取插件" aria-label="Permalink to &quot;获取插件&quot;">​</a></h6><p>编译成功后，就可以在插件目录的build/outputs/arr目录下找到编译好的插件</p><p><img src="https://img-blog.csdnimg.cn/b4b5fe02a01e46b1adfe20eab0713fd0.png" alt="img"></p><h6 id="引入插件-1" tabindex="-1">引入插件 <a class="header-anchor" href="#引入插件-1" aria-label="Permalink to &quot;引入插件&quot;">​</a></h6><p><strong>创建目录</strong></p><p>在uniapp项目中创建nativeplugins目录，然后根据插件名创建插件目录，再在其下一级创建插件相应系统目录，然后将插件复制到该目录，如图：</p><p><img src="https://img-blog.csdnimg.cn/81faaaa6c7624e8ebf782dfda9a18000.png" alt="img"></p><h6 id="创建插件包配置文件" tabindex="-1">创建插件包配置文件 <a class="header-anchor" href="#创建插件包配置文件" aria-label="Permalink to &quot;创建插件包配置文件&quot;">​</a></h6><p>在包目录下创建package.json包信息文件，用于配置包信息，具体配置如下：</p><p>name 和 id建议与插件名统一 plugins中的配置与插件配置-注册插件步骤中所填一样 dependencies：如果原生插件引入了第三方SDK，需要在此参数中配置，具体可以参考相关官方文档dependencies</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;测试插件流程&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;_dp_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nativeplugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;_dp_nativeplugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;android&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.ss.test.test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			&quot;integrateType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/6d836123c7254f7485f5f781a809748d.png" alt="img"></p><h6 id="引入插件-2" tabindex="-1">引入插件 <a class="header-anchor" href="#引入插件-2" aria-label="Permalink to &quot;引入插件&quot;">​</a></h6><p>在uniapp项目的manifest.json文件中添加配置好的插件，至此引入完成，如图：</p><p><img src="https://img-blog.csdnimg.cn/d97dacc5b6374e46a99edb7fbd2c9007.png" alt="img"></p><h6 id="打包自定义基座" tabindex="-1"><strong>打包自定义基座</strong> <a class="header-anchor" href="#打包自定义基座" aria-label="Permalink to &quot;**打包自定义基座**&quot;">​</a></h6><p><strong>新建基座打包</strong></p><p>如图，依次点击三者进行自定义基座打包配置</p><p><img src="https://img-blog.csdnimg.cn/c6d5dba39492442c9be89348831c89c6.png" alt="img"></p><p><strong>基座打包配置</strong></p><p>如图三个输入框，分别填入前面在uniapp后台获取的证书以及相关信息，然后执行打包就好</p><p><img src="https://img-blog.csdnimg.cn/14977ba8903b4786906c6ee1f7bb757c.png" alt="img"></p><p><strong>基座运行测试</strong></p><p><strong>运行自定义基座</strong></p><p>基座打包成功后，运行自定义基座到手机测试</p><p><img src="https://img-blog.csdnimg.cn/9c1edb68965942dfa927b98b8f56c055.png" alt="img"></p><p><strong>运行结果</strong></p><p>如图，与插件调试过程中一样，输出正常</p><p><img src="https://img-blog.csdnimg.cn/b2f04173ad294b41913b7779680b354b.jpeg" alt="img"></p><h5 id="jnilibs包引入" tabindex="-1">jniLibs包引入 <a class="header-anchor" href="#jnilibs包引入" aria-label="Permalink to &quot;jniLibs包引入&quot;">​</a></h5><h6 id="一般jnilibs结构" tabindex="-1">一般jniLibs结构 <a class="header-anchor" href="#一般jnilibs结构" aria-label="Permalink to &quot;一般jniLibs结构&quot;">​</a></h6><p><img src="https://img-blog.csdnimg.cn/ca4903c06ff34969b6ec3f9e0d4b0c09.png" alt="img"></p><h6 id="插件引入jnilibs库" tabindex="-1">插件引入jniLibs库 <a class="header-anchor" href="#插件引入jnilibs库" aria-label="Permalink to &quot;插件引入jniLibs库&quot;">​</a></h6><p>把相关包放到插件libs目录下</p><p><img src="https://img-blog.csdnimg.cn/6317eb1b6a5a4fea96792bcc99528013.png" alt="img"></p><h6 id="添加jnilibs库" tabindex="-1">添加jniLibs库 <a class="header-anchor" href="#添加jnilibs库" aria-label="Permalink to &quot;添加jniLibs库&quot;">​</a></h6><p>右键包中.jar文件，选择Add As Library,，然后选中当前插件包，点击OK添加就好</p><p><img src="https://img-blog.csdnimg.cn/14a07a17cd974f648a2aae2db7fd7d19.png" alt="img"></p><h6 id="配置插件包build-gradle" tabindex="-1">配置插件包<strong>build.gradle</strong> <a class="header-anchor" href="#配置插件包build-gradle" aria-label="Permalink to &quot;配置插件包**build.gradle**&quot;">​</a></h6><p>经过上一步的添加动作，jar文件已经自动引入了，如图中1标所示；然后需要将2标的配置添加进去，点击同步就好，然后就可以正常使用包了</p><p><img src="https://img-blog.csdnimg.cn/2dab4c58ae4a4ddca80442ac109d1c9d.png" alt="img"></p><ul><li>官方文档：<a href="https://nativesupport.dcloud.net.cn/NativePlugin/course/android" target="_blank" rel="noreferrer">原生开发者支持</a></li></ul>`,163)])])}const y=a(d,[["render",k]]);export{m as __pageData,y as default};
