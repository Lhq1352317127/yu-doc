import{_ as p,C as i,c as t,o as r,G as n,a2 as e}from"./chunks/framework.BYJ_yxop.js";const k=JSON.parse('{"title":"01-JavaScript简介","description":"","frontmatter":{"title":"01-JavaScript简介"},"headers":[],"relativePath":"note/WEB/JavaScript/基础/01-JavaScript简介.md","filePath":"note/WEB/JavaScript/基础/01-JavaScript简介.md","lastUpdated":1757681940000}'),l={name:"note/WEB/JavaScript/基础/01-JavaScript简介.md"};function c(o,a,h,v,S,d){const s=i("ArticleTopAd");return r(),t("div",null,[n(s),a[0]||(a[0]=e(`<h2 id="javascript-历史和发展" tabindex="-1">JavaScript 历史和发展 <a class="header-anchor" href="#javascript-历史和发展" aria-label="Permalink to &quot;JavaScript 历史和发展&quot;">​</a></h2><p>Web 前端有三层：</p><ul><li><p>HTML：从语义的角度，描述页面<strong>结构</strong></p></li><li><p>CSS：从审美的角度，描述<strong>样式</strong>（美化页面）</p></li><li><p>JavaScript（简称 JS）：从交互的角度，描述<strong>行为</strong>（实现业务逻辑和页面控制）</p></li></ul><h3 id="javascript-的历史" tabindex="-1">JavaScript 的历史 <a class="header-anchor" href="#javascript-的历史" aria-label="Permalink to &quot;JavaScript 的历史&quot;">​</a></h3><p>1、JavaScript 诞生于<strong>1995 年</strong>，是由<strong>网景</strong>公司（Netscape）的员工 Brendan Eich（兰登 • 艾奇，1961 年～）发明，最初命名为 LiveScript。1995 年 12 月与 SUN 公司合作，因市场宣传需要，为了蹭 Java 的热度，改名为 JavaScript。</p><p>补充：</p><blockquote><p>1994 年网景公司发布历史上第一个比较成熟的浏览器(Navigator 0.9), 但是只能浏览不能<strong>交互</strong>。1995 年为了解决表单有效性验证就要与服务器进行多次地往返交互问题，网景公司录用 Brendan Eich（兰登 • 艾奇），他只用了 10 天就开发出 LiveScript 语言的第一版。</p></blockquote><blockquote><p>由于 Sun 公司当时的 Java 语言特别火，所以为了傍大牌，就借势改名为 JavaScript。如同“北大”和“北大青鸟”的关系，“北大青鸟”就是傍“北大”的大牌。</p></blockquote><blockquote><p>同时期还有其他的网页语言，比如 VBScript、JScript 等等，但是后来都被 JavaScript 打败了，所以现在的浏览器中，只运行一种脚本语言就是 JavaScript。</p></blockquote><p>2、JavaScript 是 Sun 注册并授权给 Netscape 使用的商标。后来 Sun 公司 被 Oracle 收购，JavaScript 版权归 Oracle 所有。</p><p>3、1996 年，微软为了抢占市场，推出了<code>JScript</code>在 IE3.0 中使用。</p><p>4、1996 年 11 月网景公司将 JS 提交给 ECMA(国际标准化组织)成为国际标准，用于对抗微软。</p><p>补充：</p><blockquote><p>JavaScript 是世界上用的最多的<strong>脚本语言</strong>。</p></blockquote><blockquote><p>Java 和 JavaScript 的关系，就好比：雷锋和雷峰塔的关系、老婆和老婆饼的关系、北大和北大青鸟的关系。</p></blockquote><p>推荐阅读链接：</p><ul><li><a href="https://wangdoc.com/javascript/basic/history.html" target="_blank" rel="noreferrer">网道 | JavaScript 语言的历史</a></li></ul><p>###JavaScript 的发展：蒸蒸日上</p><p>2003 年之前，JavaScript 被认为“牛皮鲜”，用来制作页面上的广告，弹窗、漂浮的广告。什么东西让人烦，什么东西就是 JavaScript 开发的。所以很多浏览器就推出了屏蔽广告功能。</p><p>2004 年，JavaScript 命运开始改变。那一年，<strong>谷歌公司开始带头使用 Ajax 技术</strong>，Ajax 技术就是 JavaScript 的一个应用。并且，那时候人们逐渐开始提升用户体验了。Ajax 有一些应用场景。比如，当我们在搜索引擎框搜文字时，输入框下方的智能提示，可以通过 Ajax 实现。比如，当我们注册网易邮箱时，能够及时发现用户名是否被占用，而不用跳到另外一个页面。从 2005 年开始，几乎整个 B/S 开发界都在热情地追捧 Ajax。</p><p>2007 年乔布斯发布了第一款 iPhone，这一年开始，更多的用户使用移动设备上网。这一年，互联网开始标准化，按照 W3C 规则三层分离，JavaScript 越来越被重视。<strong>JavaScript 在移动页面中，也是不可或缺的</strong>。</p><p>2010 年，人们更加了解<strong>HTML5 技术</strong>，<strong>HTML5 推出了一个东西叫做 Canvas</strong>（画布），工程师可以在 Canvas 上进行游戏制作，利用的就是 JavaScript。</p><p>2011 年，<strong>Node.js 诞生</strong>，使 JavaScript 能够开发服务器端的程序。</p><p>如今，<strong>WebApp</strong>已经非常流行，也就是用<strong>网页技术开发手机应用</strong>。手机系统有 iOS、安卓。公司如果要开发一个“美团”App，就需要招聘四队人马：iOS 工程师 10 人、安卓工程师 12 人，前端工程师 8 人、后端工程师 16 人，共 50 人左右，开发成本巨大；而且如果要做需求迭代，就要改 3 个版本。现在，假设公司都用 web 技术，用 html+css+javascript 这一套技术就可以开发多种终端的页面。也易于迭代（网页如果改变，则所有的终端都会生效）。</p><p>有个故事是这么说的：</p><blockquote><p>2040 年，某年轻产品经理说：有没有那么一个东西，不需要下载客户端，不需要限制品牌系统，无论是鸿蒙、安卓苹果，Linux 和 Windows 等等都能实现，无差别预览信息。用户也能在这里交流，如果我们开发出来这个，我们这个产品的前景一定十分宽广。</p><p>这时候一位 40 岁的老同志说：你说的这个是不是叫网页？</p><p>这是半个世纪前的。</p></blockquote><p>虽然目前 WebApp（Web 应用）在功能和性能上的体验远不如 Native App（原生应用），但是“<strong>在原生 App 中内嵌一些 H5 页面</strong>”已经是一种趋势。</p><p>JavaScript 的发展，正在大放异彩，正如周爱民的《JavaScript 语言精髓与编程实战》中所描述的那样：</p><blockquote><p>是 ECMA 赋予了 JavaScript 新的能力和活力。</p><p>在 2015 年 6 月，ES6 发布了。这个 ECMAScript 版本几乎集成了当时其他语言梦寐以求的所有明星特性，并优雅地、不留后患地解决了几乎所有的 JavaScript 遗留问题—当然，其中那些最大的、最本质的和核心的问题其实都已经在 ES5 推出时通过“严格模式（strict mode）”解决了。</p><p>ES6 提出了四大组件：Promise、类、模块、生成器/迭代器。这事实上是在并行语言、面向对象语言、结构化语言和函数式语言四个方向上的奠基工作。相对于这种重要性来说，其他类似于解构、展开、代理等看起来很炫很实用的特性，反倒是浮在表面的繁华了。</p><p>主流引擎厂商开始通过 ES6 释放出它们的能量，于是 JavaScript 在许多新的环境中被应用起来，大量的新技术得以推动，例如，WebAssembly、Ohm、Deeplearn.js、TensorFlow.js、GPU.js、GraphQL、NativeScript 等。有了 Babel 这类项目的强大助力，新规范得以“让少数人先用起来”，而标准的发布也一路披荆斩棘，以至于实现了“一年一更”。</p></blockquote><h2 id="javascript-介绍" tabindex="-1">JavaScript 介绍 <a class="header-anchor" href="#javascript-介绍" aria-label="Permalink to &quot;JavaScript 介绍&quot;">​</a></h2><h3 id="javascript-入门易学性" tabindex="-1">JavaScript 入门易学性 <a class="header-anchor" href="#javascript-入门易学性" aria-label="Permalink to &quot;JavaScript 入门易学性&quot;">​</a></h3><ul><li><p>JavaScript 对初学者比较友好。可以使用任何文本编辑工具编写，只需要浏览器就可以执行程序。</p></li><li><p>JavaScript 是有界面效果的（相比之下，C 语言只有白底黑字）。</p></li><li><p>JavaScript 的入门较简单（进阶不易）。比如，JS 是<strong>弱变量类型</strong>的语言，变量只需要用 var/let/const 来声明。而 Java 中变量的声明，要根据变量的类型来定义。</p></li></ul><p>Java 中需要这样定义变量：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String a;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>而 JS 中，只需要用一种方式来定义：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ES5 写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ES6 写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="javascript-既是前端语言-又是后端语言" tabindex="-1">JavaScript 既是前端语言，又是后端语言 <a class="header-anchor" href="#javascript-既是前端语言-又是后端语言" aria-label="Permalink to &quot;JavaScript 既是前端语言，又是后端语言&quot;">​</a></h3><p>当 JavaScript 运行在用户的终端网页，而不是运行在服务器上的时候，我们称之为“<strong>前端语言</strong>”。前端语言是服务于页面的显示和交互，不能直接操作数据库。</p><p><strong>后端语言</strong>是运行在服务器上的，比如 Java、C++、PHP 等等，这些语言都能够操作数据库（对数据库进行“增删改查”），并在后台执行各种任务。</p><p>另外，Node.js 是用 JavaScript 开发的，我们也可以用 Node.js 技术进行服务器端编程。</p><h3 id="javascript-的组成" tabindex="-1">JavaScript 的组成 <a class="header-anchor" href="#javascript-的组成" aria-label="Permalink to &quot;JavaScript 的组成&quot;">​</a></h3><p>JavaScript 基础分为三个部分：</p><ul><li><p><strong>ECMAScript</strong>：JavaScript 的<strong>语法标准</strong>。包括变量、表达式、运算符、函数、if 语句、for 语句等。</p></li><li><p><strong>DOM</strong>：Document Object Model（文档对象模型），JS 操作<strong>页面上的元素</strong>（标签）的 API。比如让盒子移动、变色、改变大小、轮播图等等。</p></li><li><p><strong>BOM</strong>：Browser Object Model（浏览器对象模型），JS 操作<strong>浏览器部分功能</strong>的 API。通过 BOM 可以操作浏览器窗口，比如弹框、控制浏览器跳转、获取浏览器分辨率等等。</p></li></ul><p>通俗理解就是：ECMAScript 是 JS 的语法；DOM 和 BOM 是浏览器运行环境为 JS 提供的 API。</p><h2 id="javascript-的特点" tabindex="-1">JavaScript 的特点 <a class="header-anchor" href="#javascript-的特点" aria-label="Permalink to &quot;JavaScript 的特点&quot;">​</a></h2><h3 id="特点-1-解释型语言" tabindex="-1">特点 1：解释型语言 <a class="header-anchor" href="#特点-1-解释型语言" aria-label="Permalink to &quot;特点 1：解释型语言&quot;">​</a></h3><p>JavaScript 简称 JS，是前端开发的一门脚本语言（解释型语言）。</p><p><strong>解释型语言</strong>的意思是：程序执行之前，不需要事先被翻译为机器码；而是在运行时，边翻译边执行（翻译一行，执行一行）。关于解释型语言的详细介绍，上一篇文章有介绍。</p><p>为什么 JS 是解释型语言呢？这和浏览器的工作原理有关。浏览器中有一个专门的“JS 解析器”可以让 JS 边解析边执行。</p><p>由于少了事先编译这一步骤，所以解释型语言开发起来尤为方便，但是解释型语言运行较慢也是它的劣势。不过解释型语言中使用了 JIT 技术，使得运行速度得以改善。</p><h3 id="特点-2-单线程" tabindex="-1">特点 2：单线程 <a class="header-anchor" href="#特点-2-单线程" aria-label="Permalink to &quot;特点 2：单线程&quot;">​</a></h3><h3 id="特点-3-ecmascript-标准" tabindex="-1">特点 3：ECMAScript 标准 <a class="header-anchor" href="#特点-3-ecmascript-标准" aria-label="Permalink to &quot;特点 3：ECMAScript 标准&quot;">​</a></h3><p>ECMAScript 是一种由 ECMA 国际（前身为欧洲计算机制造商协会,英文名称是 European Computer Manufacturers Association）制定和发布的脚本语言规范。</p><p>JavaScript 是由公司开发而成的，问题是不便于其他的公司拓展和使用。所以欧洲的这个 ECMA 的组织，牵头制定 JavaScript 的标准，取名为 ECMAScript。</p><p>简单来说，<strong>ECMAScript 不是一门语言，而是一个标准</strong>。ECMAScript 规定了 JS 的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套 JS 语法工业标准。</p><p>ECMAScript 在 2015 年 6 月，发布了 ECMAScript 6 版本（ES6），语言的能力更强，包含了很多新特性），但也要考虑它的浏览器兼容性问题。</p><p>ECMA 赋予了 JavaScript 新的能力和活力。</p><h2 id="赞赏作者" tabindex="-1">赞赏作者 <a class="header-anchor" href="#赞赏作者" aria-label="Permalink to &quot;赞赏作者&quot;">​</a></h2><p>创作不易，你的赞赏和认可，是我更新的最大动力：</p><p><img src="https://img.smyhvae.com/20220401_1800.jpg" alt=""></p>`,60))])}const u=p(l,[["render",c]]);export{k as __pageData,u as default};
