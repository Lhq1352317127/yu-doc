import{_ as e,c as d,o,a2 as a}from"./chunks/framework.BYJ_yxop.js";const b=JSON.parse('{"title":"uni-app 全量 API 文档（整理版）","description":"","frontmatter":{},"headers":[],"relativePath":"note/WEB/uni-app/01-uni-app的api整理文档.md","filePath":"note/WEB/uni-app/01-uni-app的api整理文档.md","lastUpdated":null}'),c={name:"note/WEB/uni-app/01-uni-app的api整理文档.md"};function r(n,t,i,s,l,h){return o(),d("div",null,[...t[0]||(t[0]=[a(`<h1 id="uni-app-全量-api-文档-整理版" tabindex="-1">uni-app 全量 API 文档（整理版） <a class="header-anchor" href="#uni-app-全量-api-文档-整理版" aria-label="Permalink to &quot;uni-app 全量 API 文档（整理版）&quot;">​</a></h1><h2 id="一、全局-api" tabindex="-1">一、全局 API <a class="header-anchor" href="#一、全局-api" aria-label="Permalink to &quot;一、全局 API&quot;">​</a></h2><h3 id="_1-基础方法" tabindex="-1">1. 基础方法 <a class="header-anchor" href="#_1-基础方法" aria-label="Permalink to &quot;1. 基础方法&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.getSystemInfo()</code></td><td>获取系统信息</td><td><code>{ success, fail, complete }</code></td><td><code>uni.getSystemInfo({ success(res) { console.log(res.model); } });</code></td></tr><tr><td><code>uni.getSystemInfoSync()</code></td><td>同步获取系统信息</td><td>无</td><td><code>const res = uni.getSystemInfoSync(); console.log(res.platform); // 平台（android/ios）</code></td></tr><tr><td><code>uni.showToast()</code></td><td>显示消息提示框</td><td><code>{ title, icon, duration, mask }</code> <br> - <code>title</code>：提示内容（必填） <br> - <code>icon</code>：图标（<code>success</code>/<code>loading</code>/<code>none</code>） <br> - <code>duration</code>：显示时长（ms，默认 2000）</td><td><code>uni.showToast({ title: &#39;操作成功&#39;, icon: &#39;success&#39; });</code></td></tr><tr><td><code>uni.hideToast()</code></td><td>隐藏消息提示框</td><td>无</td><td><code>uni.hideToast();</code></td></tr><tr><td><code>uni.showLoading()</code></td><td>显示加载提示框</td><td><code>{ title, mask }</code></td><td><code>uni.showLoading({ title: &#39;加载中...&#39; });</code></td></tr><tr><td><code>uni.hideLoading()</code></td><td>隐藏加载提示框</td><td>无</td><td><code>uni.hideLoading();</code></td></tr><tr><td><code>uni.showModal()</code></td><td>显示模态对话框</td><td><code>{ title, content, showCancel, cancelText, confirmText, success }</code></td><td><code>uni.showModal({ title: &#39;提示&#39;, content: &#39;确定删除？&#39;, success(res) { if (res.confirm) console.log(&#39;用户确认&#39;); } });</code></td></tr><tr><td><code>uni.showActionSheet()</code></td><td>显示操作菜单</td><td><code>{ itemList, success, fail }</code> <br> - <code>itemList</code>：菜单选项数组（必填）</td><td><code>uni.showActionSheet({ itemList: [&#39;选项1&#39;, &#39;选项2&#39;], success(res) { console.log(&#39;选中索引：&#39;, res.tapIndex); } });</code></td></tr></tbody></table><h2 id="二、路由与页面" tabindex="-1">二、路由与页面 <a class="header-anchor" href="#二、路由与页面" aria-label="Permalink to &quot;二、路由与页面&quot;">​</a></h2><h3 id="_2-1-页面跳转" tabindex="-1">2.1 页面跳转 <a class="header-anchor" href="#_2-1-页面跳转" aria-label="Permalink to &quot;2.1 页面跳转&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.navigateTo()</code></td><td>保留当前页，跳转到新页（可返回）</td><td><code>{ url, success, fail }</code> <br> - <code>url</code>：页面路径（支持带参数，如 <code>/pages/detail?id=1</code>）</td><td><code>uni.navigateTo({ url: &#39;/pages/detail/detail?id=1&#39; });</code></td></tr><tr><td><code>uni.redirectTo()</code></td><td>关闭当前页，跳转到新页（不可返回）</td><td><code>{ url }</code></td><td><code>uni.redirectTo({ url: &#39;/pages/list/list&#39; });</code></td></tr><tr><td><code>uni.reLaunch()</code></td><td>关闭所有页面，打开新页</td><td><code>{ url }</code></td><td><code>uni.reLaunch({ url: &#39;/pages/index/index&#39; });</code></td></tr><tr><td><code>uni.switchTab()</code></td><td>跳转到 tabBar 页面（需在 <code>pages.json</code> 配置）</td><td><code>{ url }</code></td><td><code>uni.switchTab({ url: &#39;/pages/home/home&#39; });</code></td></tr><tr><td><code>uni.navigateBack()</code></td><td>返回上一页</td><td><code>{ delta }</code> <br> - <code>delta</code>：返回层数（默认 1）</td><td><code>uni.navigateBack({ delta: 2 }); // 返回两层</code></td></tr></tbody></table><h3 id="_2-2-页面生命周期-页面内调用" tabindex="-1">2.2 页面生命周期（页面内调用） <a class="header-anchor" href="#_2-2-页面生命周期-页面内调用" aria-label="Permalink to &quot;2.2 页面生命周期（页面内调用）&quot;">​</a></h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>onLoad(option)</code></td><td>页面加载时触发（参数为跳转携带的参数）</td></tr><tr><td><code>onShow()</code></td><td>页面显示/切入前台时触发</td></tr><tr><td><code>onReady()</code></td><td>页面初次渲染完成时触发</td></tr><tr><td><code>onHide()</code></td><td>页面隐藏/切入后台时触发</td></tr><tr><td><code>onUnload()</code></td><td>页面卸载时触发</td></tr><tr><td><code>onPullDownRefresh()</code></td><td>下拉刷新时触发（需在 <code>pages.json</code> 开启 <code>enablePullDownRefresh</code>）</td></tr><tr><td><code>onReachBottom()</code></td><td>上拉触底时触发</td></tr><tr><td><code>onShareAppMessage()</code></td><td>页面分享时触发（小程序/APP）</td></tr></tbody></table><h2 id="三、网络请求" tabindex="-1">三、网络请求 <a class="header-anchor" href="#三、网络请求" aria-label="Permalink to &quot;三、网络请求&quot;">​</a></h2><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.request()</code></td><td>发起网络请求</td><td><code>{ url, method, data, header, success, fail }</code> <br> - <code>url</code>：接口地址（必填） <br> - <code>method</code>：请求方法（<code>GET</code>/<code>POST</code> 等，默认 <code>GET</code>） <br> - <code>data</code>：请求数据</td><td><code>uni.request({ url: &#39;https://api.example.com/list&#39;, method: &#39;GET&#39;, data: { page: 1 }, success(res) { console.log(res.data); } });</code></td></tr><tr><td><code>uni.uploadFile()</code></td><td>上传文件</td><td><code>{ url, filePath, name, formData, success }</code> <br> - <code>filePath</code>：文件本地路径（必填） <br> - <code>name</code>：文件表单字段名（必填）</td><td><code>uni.uploadFile({ url: &#39;https://api.example.com/upload&#39;, filePath: tempFilePath, name: &#39;file&#39;, success(res) { console.log(&#39;上传成功&#39;); } });</code></td></tr><tr><td><code>uni.downloadFile()</code></td><td>下载文件</td><td><code>{ url, success, fail }</code></td><td><code>uni.downloadFile({ url: &#39;https://example.com/file.pdf&#39;, success(res) { console.log(&#39;文件路径：&#39;, res.tempFilePath); } });</code></td></tr></tbody></table><h2 id="四、数据存储" tabindex="-1">四、数据存储 <a class="header-anchor" href="#四、数据存储" aria-label="Permalink to &quot;四、数据存储&quot;">​</a></h2><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.setStorage()</code></td><td>异步存储数据</td><td><code>{ key, data, success }</code> <br> - <code>key</code>：存储键名（必填） <br> - <code>data</code>：存储值（必填）</td><td><code>uni.setStorage({ key: &#39;user&#39;, data: { name: &#39;张三&#39; } });</code></td></tr><tr><td><code>uni.setStorageSync()</code></td><td>同步存储数据</td><td><code>key, data</code></td><td><code>uni.setStorageSync(&#39;token&#39;, &#39;xxx&#39;);</code></td></tr><tr><td><code>uni.getStorage()</code></td><td>异步获取数据</td><td><code>{ key, success }</code></td><td><code>uni.getStorage({ key: &#39;user&#39;, success(res) { console.log(res.data); } });</code></td></tr><tr><td><code>uni.getStorageSync()</code></td><td>同步获取数据</td><td><code>key</code></td><td><code>const token = uni.getStorageSync(&#39;token&#39;);</code></td></tr><tr><td><code>uni.removeStorage()</code></td><td>异步删除数据</td><td><code>{ key, success }</code></td><td><code>uni.removeStorage({ key: &#39;user&#39; });</code></td></tr><tr><td><code>uni.removeStorageSync()</code></td><td>同步删除数据</td><td><code>key</code></td><td><code>uni.removeStorageSync(&#39;token&#39;);</code></td></tr><tr><td><code>uni.clearStorage()</code></td><td>异步清空存储</td><td>无</td><td><code>uni.clearStorage();</code></td></tr><tr><td><code>uni.clearStorageSync()</code></td><td>同步清空存储</td><td>无</td><td><code>uni.clearStorageSync();</code></td></tr><tr><td><code>uni.getStorageInfo()</code></td><td>获取存储信息（键名列表、空间大小）</td><td><code>{ success }</code></td><td><code>uni.getStorageInfo({ success(res) { console.log(&#39;键名列表：&#39;, res.keys); } });</code></td></tr></tbody></table><h2 id="五、设备相关" tabindex="-1">五、设备相关 <a class="header-anchor" href="#五、设备相关" aria-label="Permalink to &quot;五、设备相关&quot;">​</a></h2><h3 id="_5-1-网络状态" tabindex="-1">5.1 网络状态 <a class="header-anchor" href="#_5-1-网络状态" aria-label="Permalink to &quot;5.1 网络状态&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.getNetworkType()</code></td><td>获取网络类型（wifi/4g/3g/2g/unknown/none）</td><td><code>uni.getNetworkType({ success(res) { console.log(res.networkType); } });</code></td></tr><tr><td><code>uni.onNetworkStatusChange(callback)</code></td><td>监听网络状态变化</td><td><code>uni.onNetworkStatusChange(res =&gt; { console.log(&#39;是否联网：&#39;, res.isConnected); });</code></td></tr></tbody></table><h3 id="_5-2-系统信息" tabindex="-1">5.2 系统信息 <a class="header-anchor" href="#_5-2-系统信息" aria-label="Permalink to &quot;5.2 系统信息&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.getBatteryInfo()</code></td><td>获取电池信息（电量、是否充电）</td><td><code>uni.getBatteryInfo({ success(res) { console.log(&#39;电量：&#39;, res.level + &#39;%&#39;); } });</code></td></tr><tr><td><code>uni.getLocation()</code></td><td>获取当前位置（需配置权限）</td><td><code>uni.getLocation({ type: &#39;gcj02&#39;, success(res) { console.log(&#39;纬度：&#39;, res.latitude); } });</code></td></tr></tbody></table><h3 id="_5-3-交互反馈" tabindex="-1">5.3 交互反馈 <a class="header-anchor" href="#_5-3-交互反馈" aria-label="Permalink to &quot;5.3 交互反馈&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.vibrateShort()</code></td><td>短震动（15ms）</td><td>无</td><td><code>uni.vibrateShort();</code></td></tr><tr><td><code>uni.vibrateLong()</code></td><td>长震动（400ms）</td><td>无</td><td><code>uni.vibrateLong();</code></td></tr></tbody></table><h2 id="六、界面相关" tabindex="-1">六、界面相关 <a class="header-anchor" href="#六、界面相关" aria-label="Permalink to &quot;六、界面相关&quot;">​</a></h2><h3 id="_6-1-导航栏" tabindex="-1">6.1 导航栏 <a class="header-anchor" href="#_6-1-导航栏" aria-label="Permalink to &quot;6.1 导航栏&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.setNavigationBarTitle()</code></td><td>设置导航栏标题</td><td><code>{ title }</code>（必填）</td><td><code>uni.setNavigationBarTitle({ title: &#39;详情页&#39; });</code></td></tr><tr><td><code>uni.setNavigationBarColor()</code></td><td>设置导航栏颜色</td><td><code>{ frontColor, backgroundColor }</code> <br> - <code>frontColor</code>：文字颜色（<code>#ffffff</code> 或 <code>#000000</code>） <br> - <code>backgroundColor</code>：背景色（十六进制）</td><td><code>uni.setNavigationBarColor({ frontColor: &#39;#ffffff&#39;, backgroundColor: &#39;#007AFF&#39; });</code></td></tr><tr><td><code>uni.hideNavigationBarLoading()</code></td><td>隐藏导航栏加载动画</td><td>无</td><td><code>uni.hideNavigationBarLoading();</code></td></tr><tr><td><code>uni.showNavigationBarLoading()</code></td><td>显示导航栏加载动画</td><td>无</td><td><code>uni.showNavigationBarLoading();</code></td></tr></tbody></table><h3 id="_6-2-滚动与窗口" tabindex="-1">6.2 滚动与窗口 <a class="header-anchor" href="#_6-2-滚动与窗口" aria-label="Permalink to &quot;6.2 滚动与窗口&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.pageScrollTo()</code></td><td>滚动到页面指定位置</td><td><code>{ scrollTop, duration }</code> <br> - <code>scrollTop</code>：滚动到的位置（px，必填）</td><td><code>uni.pageScrollTo({ scrollTop: 0, duration: 300 }); // 滚动到顶部</code></td></tr><tr><td><code>uni.setTabBarBadge()</code></td><td>为 tabBar 项设置徽章</td><td><code>{ index, text }</code> <br> - <code>index</code>：tabBar 索引（必填） <br> - <code>text</code>：徽章文本（空字符串则隐藏）</td><td><code>uni.setTabBarBadge({ index: 0, text: &#39;3&#39; });</code></td></tr><tr><td><code>uni.removeTabBarBadge()</code></td><td>移除 tabBar 徽章</td><td><code>{ index }</code></td><td><code>uni.removeTabBarBadge({ index: 0 });</code></td></tr></tbody></table><h2 id="七、媒体相关" tabindex="-1">七、媒体相关 <a class="header-anchor" href="#七、媒体相关" aria-label="Permalink to &quot;七、媒体相关&quot;">​</a></h2><h3 id="_7-1-图片" tabindex="-1">7.1 图片 <a class="header-anchor" href="#_7-1-图片" aria-label="Permalink to &quot;7.1 图片&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.chooseImage()</code></td><td>选择图片</td><td><code>{ count, sizeType, sourceType, success }</code> <br> - <code>count</code>：最多选择数量（默认 9）</td><td><code>uni.chooseImage({ count: 1, success(res) { const tempFilePath = res.tempFilePaths[0]; } });</code></td></tr><tr><td><code>uni.previewImage()</code></td><td>预览图片</td><td><code>{ urls, current }</code> <br> - <code>urls</code>：图片路径数组（必填） <br> - <code>current</code>：当前显示图片索引</td><td><code>uni.previewImage({ urls: [&#39;url1&#39;, &#39;url2&#39;], current: 0 });</code></td></tr><tr><td><code>uni.saveImageToPhotosAlbum()</code></td><td>保存图片到相册</td><td><code>{ filePath, success }</code></td><td><code>uni.saveImageToPhotosAlbum({ filePath: tempFilePath });</code></td></tr></tbody></table><h3 id="_7-2-相机" tabindex="-1">7.2 相机 <a class="header-anchor" href="#_7-2-相机" aria-label="Permalink to &quot;7.2 相机&quot;">​</a></h3><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.chooseVideo()</code></td><td>拍摄/选择视频</td><td><code>{ sourceType, maxDuration, success }</code></td><td><code>uni.chooseVideo({ sourceType: [&#39;camera&#39;], success(res) { console.log(&#39;视频路径：&#39;, res.tempFilePath); } });</code></td></tr></tbody></table><h2 id="八、事件总线" tabindex="-1">八、事件总线 <a class="header-anchor" href="#八、事件总线" aria-label="Permalink to &quot;八、事件总线&quot;">​</a></h2><table><thead><tr><th>API</th><th>说明</th><th>参数</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.$on(eventName, callback)</code></td><td>监听全局事件</td><td>- <code>eventName</code>：事件名 <br> - <code>callback</code>：回调函数</td><td><code>uni.$on(&#39;refresh&#39;, (data) =&gt; { console.log(&#39;收到刷新事件：&#39;, data); });</code></td></tr><tr><td><code>uni.$emit(eventName, data)</code></td><td>触发全局事件</td><td>- <code>eventName</code>：事件名 <br> - <code>data</code>：传递的数据</td><td><code>uni.$emit(&#39;refresh&#39;, { id: 1 });</code></td></tr><tr><td><code>uni.$off(eventName, callback)</code></td><td>移除全局事件监听</td><td>- 不传参数：移除所有事件 <br> - 传 <code>eventName</code>：移除指定事件 <br> - 传 <code>eventName + callback</code>：移除指定事件的指定回调</td><td><code>// 移除 refresh 事件的所有监听 uni.$off(&#39;refresh&#39;);</code></td></tr></tbody></table><h2 id="九、其他常用-api" tabindex="-1">九、其他常用 API <a class="header-anchor" href="#九、其他常用-api" aria-label="Permalink to &quot;九、其他常用 API&quot;">​</a></h2><table><thead><tr><th>API</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>uni.makePhoneCall()</code></td><td>拨打电话</td><td><code>uni.makePhoneCall({ phoneNumber: &#39;10086&#39; });</code></td></tr><tr><td><code>uni.openLocation()</code></td><td>打开地图</td><td><code>uni.openLocation({ latitude: 39.908823, longitude: 116.397470, name: &#39;天安门&#39; });</code></td></tr><tr><td><code>uni.setClipboardData()</code></td><td>设置剪贴板内容</td><td><code>uni.setClipboardData({ data: &#39;复制的内容&#39; });</code></td></tr><tr><td><code>uni.getClipboardData()</code></td><td>获取剪贴板内容</td><td><code>uni.getClipboardData({ success(res) { console.log(res.data); } });</code></td></tr></tbody></table><h2 id="十、多端兼容-api-注意事项" tabindex="-1">十、多端兼容 API 注意事项 <a class="header-anchor" href="#十、多端兼容-api-注意事项" aria-label="Permalink to &quot;十、多端兼容 API 注意事项&quot;">​</a></h2><ol><li><p><strong>平台差异</strong>：部分 API 仅支持特定平台（如 <code>uni.login()</code> 主要用于小程序），需通过条件编译处理：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// #ifdef MP-WEIXIN</span></span>
<span class="line"><span>uni.login({ ... }); // 微信小程序登录</span></span>
<span class="line"><span>// #endif</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>权限配置</strong>：涉及位置、相机、相册等敏感操作时，需在 <code>manifest.json</code> 中配置对应权限。</p></li><li><p><strong>API 版本兼容</strong>：部分新 API 需指定基础库版本（小程序端），可通过 <code>uni.canIUse(&#39;apiName&#39;)</code> 判断是否支持。</p></li></ol><h2 id="参考资源" tabindex="-1">参考资源 <a class="header-anchor" href="#参考资源" aria-label="Permalink to &quot;参考资源&quot;">​</a></h2><ul><li><a href="https://uniapp.dcloud.net.cn/api/" target="_blank" rel="noreferrer">uni-app 官方 API 文档</a></li><li><a href="https://uniapp.dcloud.net.cn/platform" target="_blank" rel="noreferrer">平台差异说明</a></li></ul>`,38)])])}const p=e(c,[["render",r]]);export{b as __pageData,p as default};
