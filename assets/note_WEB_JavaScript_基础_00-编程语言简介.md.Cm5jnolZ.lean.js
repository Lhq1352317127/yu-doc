import{_ as i,C as e,c as t,o as n,G as l,a2 as p}from"./chunks/framework.BYJ_yxop.js";const m=JSON.parse('{"title":"00-编程语言简介","description":"","frontmatter":{"title":"00-编程语言简介"},"headers":[],"relativePath":"note/WEB/JavaScript/基础/00-编程语言简介.md","filePath":"note/WEB/JavaScript/基础/00-编程语言简介.md","lastUpdated":1757681940000}'),r={name:"note/WEB/JavaScript/基础/00-编程语言简介.md"};function o(h,a,c,d,k,g){const s=e("ArticleTopAd");return n(),t("div",null,[l(s),a[0]||(a[0]=p(`<h2 id="编程语言的概念" tabindex="-1">编程语言的概念 <a class="header-anchor" href="#编程语言的概念" aria-label="Permalink to &quot;编程语言的概念&quot;">​</a></h2><h3 id="编程" tabindex="-1">编程 <a class="header-anchor" href="#编程" aria-label="Permalink to &quot;编程&quot;">​</a></h3><p><strong>编程</strong>：让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</p><p><strong>计算机程序</strong>：就是计算机所执行的一系列的<strong>指令集合</strong>，而程序全部都是用我们所掌握的语言来编写的，所以人们如果要控制计算机，则需要通过计算机语言向计算机发出命令。</p><h3 id="计算机语言" tabindex="-1">计算机语言 <a class="header-anchor" href="#计算机语言" aria-label="Permalink to &quot;计算机语言&quot;">​</a></h3><p><strong>计算机语言</strong>：人与计算机之间通讯的语言。它是人与计算机之间传递信息的媒介，用来控制计算机的一系列指令。</p><p>计算机语言的种类非常的多，总的来说可以分成三大类：机器语言、汇编语言和高级语言。</p><p>计算机最终所执行的都是机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</p><h3 id="编程语言" tabindex="-1">编程语言 <a class="header-anchor" href="#编程语言" aria-label="Permalink to &quot;编程语言&quot;">​</a></h3><p>通过类似于人类语言的 ”语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言。不同的编程语言，有不同的语法，必须遵守。</p><p>如今通用的编程语言有两种形式：汇编语言和高级语言。</p><ul><li><p><strong>汇编语言</strong>：与机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</p></li><li><p><strong>高级语言</strong>：主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，比如：C 语言、C++、Java、C#、PHP、JavaScript、Python、Objective-C、Swift、Go 语言等。</p></li></ul><h2 id="编程语言的分类" tabindex="-1">编程语言的分类 <a class="header-anchor" href="#编程语言的分类" aria-label="Permalink to &quot;编程语言的分类&quot;">​</a></h2><h3 id="翻译器" tabindex="-1">翻译器 <a class="header-anchor" href="#翻译器" aria-label="Permalink to &quot;翻译器&quot;">​</a></h3><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所编写的高级语言翻译成机器语言，计算机才能执行程序。为此，我们需要一个翻译器。<strong>程序语言翻译成机器语言的工具，被称为翻译器</strong>。</p><p>由此可见，所谓的“翻译”，指的是将人类所编写的源代码转换（翻译）为机器能够执行的指令，这也被称为二进制化。</p><p>翻译器翻译的方式有两种：一种是<strong>编译</strong>，另一种是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译的时机</strong>不同。</p><ul><li><p><strong>编译器</strong>：在代码执行之前，事前把所有的代码一次性翻译好，生成中间代码文件，然后整体执行。</p></li><li><p><strong>解释器</strong>：边翻译，边执行（在代码执行时进行及时翻译，并立即执行）。当编译器以解释的方式运行时，也称之为解释器。</p></li></ul><p>对应的语言，称之为“编译型语言”、“解释型语言”。</p><h3 id="_1、编译型语言" tabindex="-1">1、编译型语言 <a class="header-anchor" href="#_1、编译型语言" aria-label="Permalink to &quot;1、编译型语言&quot;">​</a></h3><ul><li><p>定义：需要事先通过编译器<strong>把所有的代码一次性翻译（编译/转换）好</strong>，然后整体执行。比如 exe 文件。</p></li><li><p>优点：执行效率高，运行更快。</p></li><li><p>不足：移植性不好，不跨平台；编译之后如果需要修改就需要整个模块重新编译。</p></li><li><p>编译型语言举例：C、C++</p></li></ul><p>比如说，c 语言的代码文件是<code>.c</code>后缀，翻译之后文件是<code>.obj</code>后缀，系统执行的是 obj 文件；再比如， java 语言的代码文件是<code>.java</code>后缀，翻译之后的文件是<code>.class</code>后缀。（但是，Java 语言不是严格的 编译型语言，这个一会儿会讲）</p><p>以 C 语言的<code>hello.c</code>来举例：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>对于以上 C 代码，main 是程序入口，实现的功能是打印字符串<code>hello world</code>到屏幕上，编译和执行过程如下：</p><ol><li>C 语言代码经过预处理（比如依赖处理、宏替换）。以上方代码示例，<code>#include&lt;stdio.h&gt;</code>会在预处理阶段被替换。</li><li>编译：编译器会把 C 语言翻译成汇编程序。一条 C 语言通常被编译为多条汇编代码，同时编译器会对程序进行优化，生成目标汇编程序。</li><li>汇编语言通过汇编器再汇编成目标程序<code>hello.o</code>。</li><li>链接：程序中往往包含一些共享目标文件，如示例代码中的<code>printf()</code>函数位于静态库，需要经过链接器进行链接。</li></ol><p><img src="https://img.smyhvae.com/20211030-0031-2.png" alt="20211030-0031-2"></p><p>（上方图片的来源：<a href="https://www.jianshu.com/p/230093183f47" target="_blank" rel="noreferrer">JavaScript 基础-基本概念</a> ）</p><p><img src="http://img.smyhvae.com/20211030-0026-2.png" alt="20211030-0026-2"></p><p>（上方图片的来源：<a href="https://p.0x06.cn/zh/program/" target="_blank" rel="noreferrer">编译型语言</a> ）</p><h3 id="_2、解释型语言" tabindex="-1">2、解释型语言 <a class="header-anchor" href="#_2、解释型语言" aria-label="Permalink to &quot;2、解释型语言&quot;">​</a></h3><ul><li><p>定义：在运行过程中（runtime）通过解释器<strong>边翻译边执行</strong>（也就是逐行翻译：翻译一行，执行一行），不需要事先一次性翻译。</p></li><li><p>优点：移植性好，跨平台。</p></li><li><p>缺点：运行速度不如编译型语言。</p></li><li><p>解释型语言举例：JavaScript、PHP、Python。</p></li></ul><h3 id="java-语言" tabindex="-1">Java 语言 <a class="header-anchor" href="#java-语言" aria-label="Permalink to &quot;Java 语言&quot;">​</a></h3><p>Java 语言是属于半编译半解释型语言。翻译过程：</p><p>（1）编译：<code>.java</code>代码文件先通过 javac 命令编译成<code>.class</code>文件。</p><p>（2）执行：<code>.class</code>文件再通过 jvm 虚拟机，解释执行。有了 jvm 的存在，让 java 跨平台了。</p><h2 id="赞赏作者" tabindex="-1">赞赏作者 <a class="header-anchor" href="#赞赏作者" aria-label="Permalink to &quot;赞赏作者&quot;">​</a></h2><p>创作不易，你的赞赏和认可，是我更新的最大动力：</p><p><img src="https://img.smyhvae.com/20220401_1800.jpg" alt=""></p>`,39))])}const b=i(r,[["render",o]]);export{m as __pageData,b as default};
